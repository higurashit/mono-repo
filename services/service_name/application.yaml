# application.yaml
# -- Web Service Newworking (CloudFront, S3, API Gateway)
# -- Buisiness Logic (Lambda)
# -- Application Integration (SNS, SQS)
# -- Frontend CI/CD Pipeline

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

# ------------------------------------------------------------#
# Input Parameters
# ------------------------------------------------------------#
Parameters:
  ServiceName:
    Description: --Required--
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+$
  Env:
    Description: --Required--
    Type: String
    AllowedValues:
      - prod
      - stg
      - dev
      - reserve1
      - reserve2
  CertificatesIdentifier:
    Description: --Required-- AWS Certificate Manager Detail-Identifier ( Ex. abcd1234-efgh-5678-ijkl-mnopqrstuv90 )
    Type: String
    AllowedPattern: ^[a-z0-9-]+$
  DomainName:
    Description: --Required-- Ex. www.example-website.com
    Type: String
    AllowedPattern: ^[a-z0-9-.]+$

Resources:
# ------------------------------------------------------------#
#  SSM Parameter (common vriables)
# ------------------------------------------------------------#
  SSMParamBucketName:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '${ServiceName}-BucketName-${Env}'
      Value:  !Sub '${DomainName}-website-bucket-25816814'
# ------------------------------------------------------------#
#  S3 Bucket
# ------------------------------------------------------------#
  S3WebSiteBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !GetAtt SSMParamBucketName.Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: ServiceName
          Value: !Ref ServiceName
        - Key: Env
          Value: !Ref Env
  # Restrict access to CloudFront only
  BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3WebSiteBucket
      PolicyDocument:
        Statement:
        - Action: 's3:GetObject'
          Effect: Allow
          Resource: !Sub 'arn:aws:s3:::${S3WebSiteBucket}/*'
          Principal:
            CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

# ------------------------------------------------------------#
#  CloudFront
# ------------------------------------------------------------#
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        PriceClass: PriceClass_All
        Aliases:
        - !Ref DomainName
        Origins:
        - DomainName: !GetAtt S3WebSiteBucket.DomainName
          Id: !Sub 'S3origin-${SSMParamBucketName.Value}'
          S3OriginConfig:
            OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: !Sub 'S3origin-${SSMParamBucketName.Value}'
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
          - GET
          - HEAD
          CachedMethods:
          - GET
          - HEAD
          DefaultTTL: 3600
          MaxTTL: 86400
          MinTTL: 60
          Compress: true
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref LambdaEdgeS3DirIndex.Version
        ViewerCertificate:
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.1_2016
          AcmCertificateArn: !Sub 'arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${CertificatesIdentifier}'
        HttpVersion: http2
        Enabled: true
      Tags:
        - Key: ServiceName
          Value: !Ref ServiceName
        - Key: Env
          Value: !Ref Env

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'access-identity-${S3WebSiteBucket}'

  LambdaEdgeS3DirIndex:
    Type: AWS::Serverless::Function
    Properties:
      Description: Add index.html when accessing directory URL.
      FunctionName: !Sub '${ServiceName}LambdaEdge${Env}'
      Runtime: nodejs12.x
      Handler: index.handler
      AutoPublishAlias: !Ref Env
      Role: !GetAtt 'IamLambdaEdgeBasicRole.Arn'
      InlineCode: |
        exports.handler = (event, context, callback) => {
            var request = event.Records[0].cf.request;
            var olduri = request.uri;
            var newuri = olduri.replace(/\/$/, '\/index.html');

            console.log("Old URI: " + olduri);
            console.log("New URI: " + newuri);

            request.uri = newuri;
            return callback(null, request);
        };

# ------------------------------------------------------------#
#  Lambda@Edge role
# ------------------------------------------------------------#
  IamLambdaEdgeBasicRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ServiceName}-lambdaedge-basic--${Env}'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - sts:AssumeRole

# ------------------------------------------------------------#
# Output Parameters
# ------------------------------------------------------------#
Outputs:
  ServiceName:
    Value: !Ref ServiceName
  Env:
    Value: !Ref Env
  DomainName:
    Description: Create a DNS CNAME record to access your cloudfront domain.
    Value: !Ref DomainName
  NewWebSiteBucketArn:
    Value: !GetAtt S3WebSiteBucket.Arn
